```python
import os
from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, join_room, leave_room, emit
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.orm import scoped_session, sessionmaker, declarative_base
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
socketio = SocketIO(app)

# Database Setup (replace with your preferred database)
engine = create_engine(os.getenv('DATABASE_URL'))  #Example: postgresql://user:password@host:port/database
db_session = scoped_session(sessionmaker(bind=engine))
Base = declarative_base()

class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    room = Column(String)
    sender = Column(String)
    message = Column(Text)

Base.metadata.create_all(engine)

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('join')
def handle_join(data):
    room = data['room']
    join_room(room)
    emit('status', {'msg': f'{request.sid} joined room {room}'}, room=room)

@socketio.on('leave')
def handle_leave(data):
    room = data['room']
    leave_room(room)
    emit('status', {'msg': f'{request.sid} left room {room}'}, room=room)


@socketio.on('message')
def handle_message(data):
    room = data['room']
    msg = data['message']
    sender = data.get('sender', 'Anonymous') #Handle sender info

    new_message = Message(room=room, sender=sender, message=msg)
    db_session.add(new_message)
    db_session.commit()

    emit('message', {'sender': sender, 'message': msg}, room=room)


if __name__ == '__main__':
    socketio.run(app, debug=True)
```