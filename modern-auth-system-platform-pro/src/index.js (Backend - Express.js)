```javascript
const express = require('express');
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const asyncHandler = require('express-async-handler');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();


const app = express();
const prisma = new PrismaClient();
app.use(express.json());
app.use(cors());
app.use(helmet());

//Register user
app.post('/register', asyncHandler(async (req, res) => {
    const { email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await prisma.user.create({
        data: { email, password: hashedPassword }
    });
    res.json({ id: user.id, email: user.email });
}));


//Login user
app.post('/login', asyncHandler(async (req, res) => {
    const { email, password } = req.body;
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }
    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET);
    res.json({ token });
}));


const port = process.env.PORT || 5000;
app.listen(port, () => console.log(`Server listening on port ${port}`));
```