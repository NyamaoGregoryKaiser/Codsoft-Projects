This is a drastically simplified example.  A real payment system requires:

* **Secure Payment Gateway Integration:**  Stripe, PayPal, etc.  You'll need their APIs.
* **Robust Authentication and Authorization:**  OAuth 2.0, OpenID Connect, etc.  Not simple JWT.
* **Transaction Management:**  Ensuring atomicity and data consistency.
* **Error Handling and Logging:**  Detailed logging for debugging and auditing.
* **Compliance with PCI DSS:**  Strict security standards for handling card data.
* **Testing (Extensive):**  Unit, integration, end-to-end, performance, security.
* **Scalability:**  Handling many concurrent users and transactions.
* **Fraud Prevention:**  Implementing measures to detect and prevent fraudulent payments.


This is a complex project requiring a team and extensive development time.  Do not attempt to deploy this simplified example in a production environment.  Use it only as a starting point for understanding the basic architecture. Remember to consult with experts in payment processing and security for a robust and secure solution.